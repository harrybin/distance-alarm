name: 🤖 Continuous Integration

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      build_type:
        description: "Build type to run"
        required: false
        default: "full"
        type: choice
        options:
          - full
          - android-only
          - quality-check-only
      environment:
        description: "Target environment"
        required: false
        default: "development"
        type: choice
        options:
          - development
          - staging
          - production

env:
  DOTNET_VERSION: "9.0.x"
  PROJECT_PATH: "./DistanceAlarm.csproj"

jobs:
  build-android:
    name: 🚀 Build Android
    runs-on: ubuntu-latest
    if: ${{ !github.event.inputs.build_type || github.event.inputs.build_type == 'full' || github.event.inputs.build_type == 'android-only' }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: � Display Workflow Inputs
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "🎯 Workflow triggered manually with inputs:"
          echo "Build Type: ${{ github.event.inputs.build_type }}"
          echo "Environment: ${{ github.event.inputs.environment }}"

      - name: �🔧 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 📱 Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: 🛠️ Install MAUI Workload
        run: dotnet workload install maui-android

      - name: 📦 Restore NuGet Packages
        run: dotnet restore ${{ env.PROJECT_PATH }}

      - name: 🏗️ Build Android Debug
        run: dotnet build ${{ env.PROJECT_PATH }} -f net9.0-android -c Debug

      - name: ✅ Build Android Release
        run: dotnet build ${{ env.PROJECT_PATH }} -f net9.0-android -c Release

      - name: 📊 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: android-build-artifacts
          path: |
            bin/Debug/net9.0-android/
            bin/Release/net9.0-android/
          retention-days: 7

  code-quality:
    name: 🔍 Code Quality Checks
    runs-on: ubuntu-latest
    if: ${{ !github.event.inputs.build_type || github.event.inputs.build_type == 'full' || github.event.inputs.build_type == 'quality-check-only' }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: 📦 Restore Dependencies
        run: dotnet restore ${{ env.PROJECT_PATH }}

      - name: 🔬 Run Code Analysis
        run: dotnet build ${{ env.PROJECT_PATH }} --verbosity normal --configuration Release

      - name: 🧪 Run Tests (if any)
        run: dotnet test --no-build --verbosity normal --configuration Release || echo "No tests found"

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    if: ${{ !github.event.inputs.build_type || github.event.inputs.build_type == 'full' || github.event.inputs.build_type == 'quality-check-only' }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: Dependency Check
        run: |
          dotnet list package --vulnerable --include-transitive 2>&1 | tee vulnerability-report.txt
          if grep -q "has the following vulnerable packages" vulnerability-report.txt; then
            echo "⚠️ Vulnerable packages found!"
            cat vulnerability-report.txt
            exit 1
          else
            echo "✅ No vulnerable packages found"
          fi

  status-check:
    name: 📋 Build Status Summary
    runs-on: ubuntu-latest
    needs: [build-android, code-quality, security-scan]
    if: always()

    steps:
      - name: 📊 Report Status
        run: |
          echo "## 🎯 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🚀 Android Build | ${{ needs.build-android.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔒 Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Success' || '⚠️ Issues Found' }} |" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.build-android.result }}" == "success" && "${{ needs.code-quality.result }}" == "success" ]]; then
            echo "🎉 All checks passed! Ready for deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Some checks failed. Please review before merging." >> $GITHUB_STEP_SUMMARY
          fi
